2. Algorithmization
–≠—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –≥–ª—É–±–∏–Ω—ã –∏–∑—É—á–∞–µ–º–æ–≥–æ
–º–∞—Ç–µ—Ä–∏–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª —Ç–∞–∫, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å (—Ö–æ—Ç—å –ø–∞—Ä—É —Å–ª–æ–≤üòä) –ø–æ
–∫–∞–∂–¥–æ–º—É –≤–æ–ø—Ä–æ—Å—É.

1. –î–∞–π—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤—É. –ö–∞–∫ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞. –ö–∞–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ i-–º—É
—ç–ª–µ–º–µ–Ω—Ç—É –º–∞—Å—Å–∏–≤–∞?
–ú–∞—Å—Å–∏–≤ ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, —Ö—Ä–∞–Ω—è—â–∞—è –Ω–∞–±–æ—Ä –∑–Ω–∞—á–µ–Ω–∏–π –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞, –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º—ã—Ö –ø–æ –∏–Ω–¥–µ–∫—Å—É –∏–ª–∏ –Ω–∞–±–æ—Ä—É –∏–Ω–¥–µ–∫—Å–æ–≤, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏—Ö —Ü–µ–ª—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.
–°—á—ë—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0 —ç–ª–µ–º–µ–Ω—Ç–∞. –æ–±—Ä–∞—â–∞—Ç—Å—è —Ç–∞–∫: array[i];
2. –ü—Ä–∏–≤–µ–¥–∏—Ç–µ —Å–ø–æ—Å–æ–±—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–¥–Ω–æ–º–µ—Ä–Ω—ã—Ö –∏ –¥–≤—É–º–µ—Ä–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤ –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã—Ö –∏ —Å—Å—ã–ª–æ—á–Ω—ã—Ö
—Ç–∏–ø–æ–≤. –£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–Ω–∏—Ü—É, –º–µ–∂–¥—É –º–∞—Å—Å–∏–≤–∞–º–∏ –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã—Ö –∏ —Å—Å—ã–ª–æ—á–Ω—ã—Ö —Ç–∏–ø–æ–≤.
–û–¥–Ω–æ–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ –ø—Ä–∏–º–∏—Ç–∏–≤–æ–≤:
int[] b = new int[5];
5 –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –ª–∏—Ç–µ—Ä–∞–ª—ã
–û–¥–Ω–æ–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å—Å—ã–ª–æ—á–Ω—ã—Ö:
String[] b = new String[5];
–î–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ –ø—Ä–∏–º–∏—Ç–∏–≤–æ–≤:
int[][] b = new int[5][5];
–î–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å—Å—ã–ª–æ—á–Ω—ã—Ö
String[][] b = new String[5][5];

–†–∞–∑–Ω–∏—Ü–∞ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ –º–∞—Å—Å–∏–≤ —Å—Å—ã–ª–æ—á–Ω—ã—Ö —Ö—Ä–∞–Ω–∏—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç—Ç–∏ —Å–∞–º—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤ –ø–∞–º—è—Ç–∏
3. –û–±—ä—è—Å–Ω–∏—Ç–µ, —á—Ç–æ –∑–Ω–∞—á–∏—Ç –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞, –∫–∞–∫ –≤ Java –º–æ–∂–Ω–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Å–∏–≤, –≤ —á–µ–º —Å–æ—Å—Ç–æ–∏—Ç —Ä–∞–∑–Ω–∏—Ü–∞ –≤
–∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–∞—Å—Å–∏–≤–æ–≤ –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã—Ö –∏ —Å—Å—ã–ª–æ—á–Ω—ã—Ö —Ç–∏–ø–æ–≤.
–∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Å–∏–≤ - —Å–æ–∑–¥–∞—Ç—å —Ç–∞–∫–æ–π –∂–µ –º–∞—Å—Å–∏–≤, —Å —Ç–∞–∫–∏–º–∏ –∂–µ –¥–∞–Ω–Ω—ã–º–∏
Object.clone ()
Arrays.copyOf ()
System.arraycopy ()
Arrays.copyOfRange ()

4. –û–±—ä—è—Å–Ω–∏—Ç–µ, —á—Ç–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –¥–≤—É–º–µ—Ä–Ω—ã—Ö –º–∞—Å—Å–∏–≤ –≤ Java, —á—Ç–æ —Ç–∞–∫–æ–µ ‚Äú—Ä–≤–∞–Ω—ã–π –º–∞—Å—Å–∏–≤‚Äù. –ö–∞–∫ —É–∑–Ω–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
—Å—Ç—Ä–æ–∫ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ –¥–ª—è ‚Äú—Ä–≤–∞–Ω–æ–≥–æ‚Äù –º–∞—Å—Å–∏–≤–∞?
–ú–∞—Å—Å–∏–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤ —Å–µ–±–µ –º–∞—Å—Å–∏–≤—ã —Å —Ä–∞–∑–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
.length

5. –û–±—ä—è—Å–Ω–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ –≤ java-–∫–æ–¥–µ –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏
java.lang.ArrayIndexOutOfBoundsException –∏ java.lang.ArrayStoreException.
1)–ü—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —ç–ª–µ–º–µ–Ω—Ç—É, –∏–Ω–¥–µ–∫—Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±–æ–ª—å—à–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –º–∞—Å—Å–∏–≤–∞
2)–ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –≤ –æ–¥–∏–Ω –º–∞—Å—Å–∏–≤

6. –û–±—ä—è—Å–Ω–∏—Ç–µ, –∑–∞—á–µ–º –ø—Ä–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞–∑–¥–µ–ª—è—Ç—å —Ä–µ—à–∞–µ–º—É—é –∑–∞–¥–∞—á—É –Ω–∞ –º–µ—Ç–æ–¥—ã. –ü–æ—è—Å–Ω–∏—Ç–µ, –∫–∞–∫ –≤—ã –ø–æ–Ω–∏–º–∞–µ—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ:
‚Äú–û–¥–∏–Ω –º–µ—Ç–æ–¥ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–≤–µ –∑–∞–¥–∞—á–∏‚Äù.
–∫–æ–¥ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å –ü—Ä–∏–Ω—Ü–∏–ø –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏. —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –æ–¥–∏–Ω –º–µ—Ç–æ–¥ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–≤–∞ —Ä–∞–∑–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏—è

7. –û–±—ä—è—Å–Ω–∏—Ç–µ, –∫–∞–∫ –≤ Java –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –º–µ—Ç–æ–¥—ã, –≤ —á–µ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –º–µ—Ç–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–º–∏—Ç–∏–≤–Ω–æ–≥–æ
—Ç–∏–ø–∞, –∞ –≤ —á–µ–º —Å—Å—ã–ª–æ—á–Ω–æ–≥–æ.
Java –ø–µ—Ä–µ–¥–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é. –í—Å–µ–≥–¥–∞.
–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ‚Äî "—Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞—Ç—å –∫–æ–ø–∏—é."
–î–ª—è –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤ ‚Äî –≤—ã –ø–µ—Ä–µ–¥–∞–µ—Ç–µ –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è, 
–¥–ª—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–±—ä–µ–∫—Ç—ã ‚Äî –≤—ã –ø–µ—Ä–µ–¥–∞–µ—Ç–µ –∫–æ–ø–∏—é —Å—Å—ã–ª–∫–∏ (–¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è).
–í—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç–µ –æ–±—ä–µ–∫—Ç. –í—Å–µ –æ–±—ä–µ–∫—Ç—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –∫—É—á–µ. –í—Å–µ–≥–¥–∞. 



8. –û–±—ä—è—Å–Ω–∏—Ç–µ, –∫–∞–∫ –≤ –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–¥–∞—Ç—å –º–∞—Å—Å–∏–≤. –ò –∫–∞–∫ –º–∞—Å—Å–∏–≤ –≤–µ—Ä–Ω—É—Ç—å –∏–∑ –º–µ—Ç–æ–¥–∞. –ú–æ–∂–Ω–æ –ª–∏ –≤ –º–µ—Ç–æ–¥–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä
–ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞.
–ø–µ—Ä–µ–¥–∞—Ç—å String[] array
–≤–µ—Ä–Ω—É—Ç—å return array;
–Ω–µ–ª—å–∑—è
9. –ü–æ—è—Å–Ω–∏—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏–µ ‚Äò–≤–µ—Ä–Ω—É—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –º–µ—Ç–æ–¥–∞‚Äô. –ö–∞–∫ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –º–µ—Ç–æ–¥–∞. –ï—Å—Ç—å –ª–∏
—Ä–∞–∑–Ω–∏—Ü–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–∏–º–∏—Ç–∏–≤–Ω–æ–≥–æ –∏ —Å—Å—ã–ª–æ—á–Ω–æ–≥–æ —Ç–∏–ø–æ–≤.
return

10. –ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –≤–∞–º –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π, –ø—Ä–∏–≤–µ–¥–∏—Ç–µ –∫–æ–¥, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π —ç—Ç–æ –∞–ª–≥–æ—Ä–∏—Ç–º—ã.
–±—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
public static void quickSort(int[] array, int low, int high) {
        if (array.length == 0)
            return;//–∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ —Ä–∞–≤–Ω–∞ 0
 
        if (low >= high)
            return;//–∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ —É–∂–µ –Ω–µ—á–µ–≥–æ –¥–µ–ª–∏—Ç—å
 
        // –≤—ã–±—Ä–∞—Ç—å –æ–ø–æ—Ä–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        int middle = low + (high - low) / 2;
        int opora = array[middle];
 
        // —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ –ø–æ–¥–º–∞—Å—Å–∏–≤—ã, –∫–æ—Ç–æ—Ä—ã–π –±–æ–ª—å—à–µ –∏ –º–µ–Ω—å—à–µ –æ–ø–æ—Ä–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        int i = low, j = high;
        while (i <= j) {
            while (array[i] < opora) {
                i++;
            }
 
            while (array[j] > opora) {
                j--;
            }
 
            if (i <= j) {//–º–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏
                int temp = array[i];
                array[i] = array[j];
                array[j] = temp;
                i++;
                j--;
            }
        }
 
        // –≤—ã–∑–æ–≤ —Ä–µ–∫—É—Ä—Å–∏–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ª–µ–≤–æ–π –∏ –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏
        if (low < j)
            quickSort(array, low, j);
 
        if (high > i)
            quickSort(array, i, high);
    }
–≤—Å—Ç–∞–≤–∫–∞–º–∏
public static void insertionSort(int[] array) {  
    for (int i = 1; i < array.length; i++) {
        int current = array[i];
        int j = i - 1;
        while(j >= 0 && current < array[j]) {
            array[j+1] = array[j];
            j--;
        }
         
        array[j+1] = current;
    }
}
–ø—É–∑—ã—Ä—å–∫–æ–º
public static void bubbleSort(int[] array) {  
    boolean sorted = false;
    int temp;
    while(!sorted) {
        sorted = true;
        for (int i = 0; i < array.length - 1; i++) {
            if (array[i] > array[i+1]) {
                temp = array[i];
                array[i] = array[i+1];
                array[i+1] = temp;
                sorted = false;
            }
        }
    }
}
—Å–ª–∏—è–Ω–∏–µ–º
public static void mergeSort(int[] array, int left, int right) {  
    if (right <= left) return;
    int mid = (left+right)/2;
    mergeSort(array, left, mid);
    mergeSort(array, mid+1, right);
    merge(array, left, mid, right);
}
public static void merge(int[] array, int low, int mid, int high) {
    int leftArray[] = new int[mid - low + 1];
    int rightArray[] = new int[high - mid];

   
    for (int i = 0; i < leftArray.length; i++)
        leftArray[i] = array[low + i];
    for (int i = 0; i < rightArray.length; i++)
        rightArray[i] = array[mid + i + 1];
    int leftIndex = 0;
    int rightIndex = 0;  
    for (int i = low; i < high + 1; i++) { 
        if (leftIndex < leftArray.length && rightIndex < rightArray.length) {
            if (leftArray[leftIndex] < rightArray[rightIndex]) {
               array[i] = leftArray[leftIndex];
               leftIndex++;
            } else {
                array[i] = rightArray[rightIndex];
                rightIndex++;
            }
        } else if (leftIndex < leftArray.length) {
            array[i] = leftArray[leftIndex];
            leftIndex++;
        } else if (rightIndex < rightArray.length) {
            array[i] = rightArray[rightIndex];
            rightIndex++;
        }
    }
}
—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—ã–±–æ—Ä–æ–º
int[] array = {10, 2, 10, 3, 1, 2, 5};
System.out.println(Arrays.toString(array));
for (int left = 0; left < array.length; left++) {
	int minInd = left;
	for (int i = left; i < array.length; i++) {
		if (array[i] < array[minInd]) {
			minInd = i;
		}
	}
	swap(array, left, minInd);
}
—à–µ–ª–ª–∞
public void sort (int[] arr)
    {
        for (int inc = arr.length / 2; inc >= 1; inc = inc / 2)
            for (int step = 0; step < inc; step++)
                insertionSort (arr, step, inc);
    }

    private void insertionSort (int[] arr, int start, int inc)
    {
        int tmp;
        for (int i = start; i < arr.length - 1; i += inc)
            for (int j = Math.min(i+inc, arr.length-1); j-inc >= 0; j = j-inc)
                if (arr[j - inc] > arr[j])
                {
                    tmp = arr[j];
                    arr[j] = arr[j-inc];
                    arr[j-inc] = tmp;
                }
                else break;
    }